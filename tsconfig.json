{
  // 编译选项
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig to read more about this file */


    /**
     * Projects(项目)
    **/

    // TS编译器在第一次编译之后会生成一个存储编译信息的文件，第二次编译会在第一次的基础上进行增量编译，可以提高编译的速度
    // "incremental": true,                             
    // 指定tsconfig.tsbuildinfo文件路径，确定它的放置位置
    // "tsBuildInfoFile": "./.tsbuildinfo",              
    // 打印诊断信息
    "diagnostics":true,

    /* 大型项目中，有多个项目引用的时候才会用到以下选项 */
    // "composite": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */
    // "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects. */
    // "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */
    // "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */


    /**
     * Language and Environment(语言和环境)
    **/

    // 编译目标版本 
    "target": "es2016", 
    // 指定编译器在编译TypeScript代码时应包含哪些库文件, 这些库文件提供了TypeScript运行时所需的一些声明和类型定义，确保TypeScript代码在编译成JavaScript后能够正确的与这些库交互 (TS需要引用的库，即声明文件, 如需要使用es的高级版本特性，通常都需要配置，如es8的数组新特性需要引入"ES2019.Array")
    "lib": ["ES6","DOM"],                                      
    // 禁止自动包含任何库文件。如果设置了该选项，lib 将被忽略。
    // "noLib": true,          
    // 指定需要包含的类型声明文件
    // "types": [],                       
    // 用于指定处理jsx语法。TypeScript支持jsx，并允许你通过jsx配置项来选择不同的转换方式，控制Javascript文件中jsx结构的输出方式。这只会影响以.tsx文件开始的js文件输出 
    // "jsx": "preserve",                                

    // 是否启用装饰器 
    // "experimentalDecorators": true,         
    // "emitDecoratorMetadata": true,                   

    // "jsxFactory": "",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'. */
    // "jsxFragmentFactory": "",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
    // "jsxImportSource": "",                            /* Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'. */
    // "reactNamespace": "",                             /* Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit. */
    // "useDefineForClassFields": true,                  /* Emit ECMAScript-standard-compliant class fields. */
    // "moduleDetection": "auto",                        /* Control what method is used to detect module-format JS files. */



    /**
     * Modules(模块)
    **/


    // 指定生成代码的模块标准
    // "module": "commonjs", 
    // 允许编译器编译js,jsx文件
    // "allowJs": true,     
    // 允许在js中报错，通常和allowJs一起使用
    // "checkJs": true,                                 
    // 指定输出文件目录，用于控制输出目录结构    ？？？
    // "rootDir": "./",                                


    // "moduleResolution": "node",                       /* Specify how TypeScript looks up a file from a given module specifier. */
    // "baseUrl": "./",                                  /* Specify the base directory to resolve non-relative module names. */
    // "paths": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */
    // "rootDirs": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */
    // "typeRoots": [],                                  /* Specify multiple folders that act like './node_modules/@types'. */
    // "allowUmdGlobalAccess": true,                     /* Allow accessing UMD globals from modules. */
    // "moduleSuffixes": [],                             /* List of file name suffixes to search when resolving a module. */
    // "resolveJsonModule": true,                        /* Enable importing .json files. */
    // "noResolve": true,                                /* Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */
    /* JavaScript Support */
    // "maxNodeModuleJsDepth": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */
   
   

    /**
     * Emit(输出)
    **/

    // 开启后会自动生成声明文件
    // "declaration": true,       
    // 指定生成声明文件的存放目录
    // "declarationDir": "./",    
    // 只生成声明文件，而不会生成js文件
    // "emitDeclarationOnly": true, 
    // 生成目标文件的sourceMap文件
    // "sourceMap": true,     
    // 生成目标文件的inlineSourceMap，inlineSourceMap会包含在生成的js文件
    // "inlineSourceMap": true,                        
    // 为声明文件生成sourceMap文件
    // "declarationMap": true,                           
    // 删除注释
    // "removeComments": true,                         
    // 编译后不会生成任何文件
    // "noEmit": true,                                  
    // 发送错误时不输出任何文件
    // "noEmitOnError": true,                          
   


    // "outFile": "./",                                  /* Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output. */
    // 指定输出目录
    // "outDir": "./dist",                                  

    
    
    // "importHelpers": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */
    // "importsNotUsedAsValues": "remove",               /* Specify emit/checking behavior for imports that are only used for types. */
    // "downlevelIteration": true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */
    // "sourceRoot": "",                                 /* Specify the root path for debuggers to find the reference source code. */
    // "mapRoot": "",                                    /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSources": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */
    // "emitBOM": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
    // "newLine": "crlf",                                /* Set the newline character for emitting files. */
    // "stripInternal": true,                            /* Disable emitting declarations that have '@internal' in their JSDoc comments. */
    // "noEmitHelpers": true,                            /* Disable generating custom helper functions like '__extends' in compiled output. */
    // "preserveConstEnums": true,                       /* Disable erasing 'const enum' declarations in generated code. */
    // "preserveValueImports": true,                     /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */
   
   

    /**
     * Interop Constraints(限制)
    **/

    // "isolatedModules": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */
    // "allowSyntheticDefaultImports": true,             /* Allow 'import x from y' when a module doesn't have a default export. */
    "esModuleInterop": true, /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */
    // "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
    "forceConsistentCasingInFileNames": true, /* Ensure that casing is correct in imports. */
    /* Type Checking */
    "strict": false, /* Enable all strict type-checking options. */
    // "noImplicitAny": true,                            /* Enable error reporting for expressions and declarations with an implied 'any' type. */
    // "strictNullChecks": true,                         /* When type checking, take into account 'null' and 'undefined'. */
    // "strictFunctionTypes": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
    // "strictBindCallApply": true,                      /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */
    // "strictPropertyInitialization": true,             /* Check for class properties that are declared but not set in the constructor. */
    // "noImplicitThis": true,                           /* Enable error reporting when 'this' is given the type 'any'. */
    // "useUnknownInCatchVariables": true,               /* Default catch clause variables as 'unknown' instead of 'any'. */
    // "alwaysStrict": true,                             /* Ensure 'use strict' is always emitted. */
    // "noUnusedLocals": true,                           /* Enable error reporting when local variables aren't read. */
    // "noUnusedParameters": true,                       /* Raise an error when a function parameter isn't read. */
    // "exactOptionalPropertyTypes": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */
    // "noImplicitReturns": true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */
    // "noFallthroughCasesInSwitch": true,               /* Enable error reporting for fallthrough cases in switch statements. */
    // "noUncheckedIndexedAccess": true,                 /* Add 'undefined' to a type when accessed using an index. */
    // "noImplicitOverride": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */
    // "noPropertyAccessFromIndexSignature": true,       /* Enforces using indexed accessors for keys declared using an indexed type. */
    // "allowUnusedLabels": true,                        /* Disable error reporting for unused labels. */
    // "allowUnreachableCode": true,                     /* Disable error reporting for unreachable code. */
   

    /**
     * Completeness(完整性)
    **/

    // "skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */
    "skipLibCheck": true /* Skip type checking all .d.ts files. */
  },
  
  // 表示编译器需要排除的文件或文件夹 （写在里面的文件将不会被编译）
  // "exclude": [],

  // 表示编译器需要编译的文件或目录
  // "include": [],

  // 表示编译器需要编译的单个文件列表
  // "files": [],

  // 引入其它配置文件，继承配置  (目前社区周边有常规配置，可以下载导入即可，会更快)
  // "extends": "",

  // 指定工程引用依赖    ？？？
  // "references": {},


  // https://blog.csdn.net/z591102/article/details/105530587    这篇文章写的蛮好，可以参考
}